<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
  <script src="https://unpkg.com/bcryptjs@2.4.3/dist/bcrypt.js"></script>
</head>

<body>
  <script>
    let connections = 0

    async function setup() {
      let res = await fetch("/get")
        .then((res) => res.json())
        .then((data) => data);
      if (res.code === 0) {
        console.log("fetch from client")
        createPeerWithConnection(res.id, res.checksum)
      } else {
        console.log("fetch from server")
        setData(res.html)
        createPeerWithoutConnection(res.html)
      }
    }
    setup()

    function createPeerWithoutConnection(html) {
      let peer = new Peer(undefined, {
        host: window.location.hostname,
        port: 3000,
        path: "/peerserver"
      })
      peer.on("open", () => {
        peer.on('connection', function (conn) {
          connections++
          console.log(connections + ". From: " + conn.peer)
          conn.on("open", () => {
            conn.send(html)
          })
        });
      })
    }


    function createPeerWithConnection(connid, checksum) {
      let peer = new Peer(undefined, {
        host: window.location.hostname,
        port: 3000,
        path: "/peerserver"
      })
      peer.on("open", () => {
        let conn = peer.connect(connid);
        conn.on('data', function (data) {
          peer.destroy()
          createPeerWithoutConnection(data)
          if (dcodeIO.bcrypt.compareSync(JSON.stringify(data), checksum)) {
            setData(data)
          } else {
            async function getDirekt() {
              let res = await fetch("/html")
                .then((res) => res.json())
                .then((data) => data);
              setData(res.html)
              createPeerWithoutConnection(res.html)
            }
            console.log("fallback to server")
            getDirekt()
          }
        })
      })
    }

    function setData(html) {
      //set dom content
      document.head.innerHTML = html.head;
      document.body.innerHTML = html.body;

      //rerun scripts
      scriptsHandler("head")
      scriptsHandler("body")
    }

    function scriptsHandler(prop) {
      const scripts = document[prop].getElementsByTagName("script")
      let newscripts = []
      for (let i = 0; i < scripts.length; i++) {
        let newscript = document.createElement('script');

        //create same script again (rerun)
        if (scripts[i].async) newscript.async = scripts[i].async
        if (scripts[i].crossOrigin) newscript.crossOrigin = scripts[i].crossOrigin
        if (scripts[i].defer) newscript.defer = scripts[i].defer
        if (scripts[i].integrity) newscript.integrity = scripts[i].integrity
        if (scripts[i].nomodule) newscript.nomodule = scripts[i].nomodule
        if (scripts[i].referrerpolicy) newscript.referrerpolicy = scripts[i].referrerpolicy
        if (scripts[i].src) newscript.src = scripts[i].src
        if (scripts[i].type) newscript.type = scripts[i].type
        if (scripts[i].innerHTML) newscript.innerHTML = scripts[i].innerHTML
        newscripts = [...newscripts, newscript]
      }
      for (let i = 0; i < newscripts.length; i++) {
        document[prop].appendChild(newscripts[i])
      }
    }
  </script>
</body>

</html>